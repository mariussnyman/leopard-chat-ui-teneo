{"version":3,"sources":["webpack:///../../../src/components/VCombobox/VCombobox.ts","webpack:///../../../src/components/VTextarea/VTextarea.ts","webpack:///../../../src/components/VAutocomplete/VAutocomplete.ts","webpack:///../../../src/components/VDivider/VDivider.ts"],"names":["name","props","delimiters","type","default","returnObject","data","editingIndex","computed","computedCounterValue","this","multiple","selectedItems","internalSearch","hasSlot","isAnyValueAllowed","menuCanShow","hasDisplayedItems","$slots","methods","onInternalSearchChanged","val","delimiter","find","d","genInput","input","genChipSelection","chip","dblclick","t","onChipInput","onEnterDown","e","getMenuIndex","onFilteredItemsChanged","onKeyDown","keyCode","$refs","selectionStart","onTabDown","selectItem","setSelectedItems","internalValue","setValue","value","updateEditing","updateCombobox","isUsingSlot","Boolean","$scopedSlots","getText","updateSelf","updateTags","menuIndex","index","indexOf","onPaste","pastedItemText","event","findExistingIndex","baseMixins","autoGrow","noResize","rowHeight","Number","validator","v","isNaN","parseFloat","rows","parseInt","classes","noResizeHandle","watch","lazyValue","$nextTick","mounted","setTimeout","calculateInputHeight","height","minHeight","Math","onInput","isFocused","defaultMenuProps","offsetY","offsetOverflow","transition","allowOverflow","autoSelectFirst","filter","itemText","queryText","hideNoData","menuProps","noFilter","searchInput","lazySearch","selectedIndex","computedItems","selectedValues","map","item","hideSelected","filteredItems","some","length","currentRange","selectedItem","String","allItems","get","set","isDirty","searchIsDirty","isSearching","$_menuProps","i","listData","items","document","isMenuActive","oldVal","activateMenu","created","updateMenuDimensions","menu","changeSelectedIndex","deleteCurrentItem","currentItem","getDisabled","newIndex","clearableCallback","attrs","autocomplete","domProps","genInputSlot","slot","genSelections","onClick","isAppendInner","target","onSpaceDown","onUpDown","setSearch","valueComparator","getValue","hasItem","onCopy","currentItemText","inset","vertical","render","$attrs","role","orientation","h","class","themeClasses","on","$listeners"],"mappings":"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","file":"assets/js/chunk-41eea596.24736b52.js","sourcesContent":["// Styles\nimport '../VAutocomplete/VAutocomplete.sass'\n\n// Extensions\nimport VSelect from '../VSelect/VSelect'\nimport VAutocomplete from '../VAutocomplete/VAutocomplete'\n\n// Utils\nimport { keyCodes } from '../../util/helpers'\n\n// Types\nimport { PropType } from 'vue'\n\n/* @vue/component */\nexport default VAutocomplete.extend({\n  name: 'v-combobox',\n\n  props: {\n    delimiters: {\n      type: Array as PropType<string[]>,\n      default: () => ([]),\n    },\n    returnObject: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  data: () => ({\n    editingIndex: -1,\n  }),\n\n  computed: {\n    computedCounterValue (): number {\n      return this.multiple\n        ? this.selectedItems.length\n        : (this.internalSearch || '').toString().length\n    },\n    hasSlot (): boolean {\n      return VSelect.options.computed.hasSlot.call(this) || this.multiple\n    },\n    isAnyValueAllowed (): boolean {\n      return true\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems ||\n        (!!this.$slots['no-data'] && !this.hideNoData)\n    },\n  },\n\n  methods: {\n    onInternalSearchChanged (val: any) {\n      if (\n        val &&\n        this.multiple &&\n        this.delimiters.length\n      ) {\n        const delimiter = this.delimiters.find(d => val.endsWith(d))\n        if (delimiter != null) {\n          this.internalSearch = val.slice(0, val.length - delimiter.length)\n          this.updateTags()\n        }\n      }\n\n      this.updateMenuDimensions()\n    },\n    genInput () {\n      const input = VAutocomplete.options.methods.genInput.call(this)\n\n      delete input.data!.attrs!.name\n      input.data!.on!.paste = this.onPaste\n\n      return input\n    },\n    genChipSelection (item: object, index: number) {\n      const chip = VSelect.options.methods.genChipSelection.call(this, item, index)\n\n      // Allow user to update an existing value\n      if (this.multiple) {\n        chip.componentOptions!.listeners! = {\n          ...chip.componentOptions!.listeners!,\n          dblclick: () => {\n            this.editingIndex = index\n            this.internalSearch = this.getText(item)\n            this.selectedIndex = -1\n          },\n        }\n      }\n\n      return chip\n    },\n    onChipInput (item: object) {\n      VSelect.options.methods.onChipInput.call(this, item)\n\n      this.editingIndex = -1\n    },\n    // Requires a manual definition\n    // to overwrite removal in v-autocomplete\n    onEnterDown (e: Event) {\n      e.preventDefault()\n      // If has menu index, let v-select-list handle\n      if (this.getMenuIndex() > -1) return\n\n      this.$nextTick(this.updateSelf)\n    },\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      if (!this.autoSelectFirst) return\n\n      VAutocomplete.options.methods.onFilteredItemsChanged.call(this, val, oldVal)\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      VSelect.options.methods.onKeyDown.call(this, e)\n\n      // If user is at selection index of 0\n      // create a new tag\n      if (this.multiple &&\n        keyCode === keyCodes.left &&\n        this.$refs.input.selectionStart === 0\n      ) {\n        this.updateSelf()\n      } else if (keyCode === keyCodes.enter) {\n        this.onEnterDown(e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onTabDown (e: KeyboardEvent) {\n      // When adding tags, if searching and\n      // there is not a filtered options,\n      // add the value to the tags list\n      if (this.multiple &&\n        this.internalSearch &&\n        this.getMenuIndex() === -1\n      ) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        return this.updateTags()\n      }\n\n      VAutocomplete.options.methods.onTabDown.call(this, e)\n    },\n    selectItem (item: object) {\n      // Currently only supports items:<string[]>\n      if (this.editingIndex > -1) {\n        this.updateEditing()\n      } else {\n        VAutocomplete.options.methods.selectItem.call(this, item)\n      }\n    },\n    setSelectedItems () {\n      if (this.internalValue == null ||\n        this.internalValue === ''\n      ) {\n        this.selectedItems = []\n      } else {\n        this.selectedItems = this.multiple ? this.internalValue : [this.internalValue]\n      }\n    },\n    setValue (value?: any) {\n      VSelect.options.methods.setValue.call(this, value != null ? value : this.internalSearch)\n    },\n    updateEditing () {\n      const value = this.internalValue.slice()\n      value[this.editingIndex] = this.internalSearch\n\n      this.setValue(value)\n\n      this.editingIndex = -1\n    },\n    updateCombobox () {\n      const isUsingSlot = Boolean(this.$scopedSlots.selection) || this.hasChips\n\n      // If search is not dirty and is\n      // using slot, do nothing\n      if (isUsingSlot && !this.searchIsDirty) return\n\n      // The internal search is not matching\n      // the internal value, update the input\n      if (this.internalSearch !== this.getText(this.internalValue)) this.setValue()\n\n      // Reset search if using slot\n      // to avoid a double input\n      if (isUsingSlot) this.internalSearch = undefined\n    },\n    updateSelf () {\n      this.multiple ? this.updateTags() : this.updateCombobox()\n    },\n    updateTags () {\n      const menuIndex = this.getMenuIndex()\n\n      // If the user is not searching\n      // and no menu item is selected\n      // do nothing\n      if (menuIndex < 0 &&\n        !this.searchIsDirty\n      ) return\n\n      if (this.editingIndex > -1) {\n        return this.updateEditing()\n      }\n\n      const index = this.selectedItems.indexOf(this.internalSearch)\n      // If it already exists, do nothing\n      // this might need to change to bring\n      // the duplicated item to the last entered\n      if (index > -1) {\n        const internalValue = this.internalValue.slice()\n        internalValue.splice(index, 1)\n\n        this.setValue(internalValue)\n      }\n\n      // If menu index is greater than 1\n      // the selection is handled elsewhere\n      // TODO: find out where\n      if (menuIndex > -1) return (this.internalSearch = null)\n\n      this.selectItem(this.internalSearch)\n      this.internalSearch = null\n    },\n    onPaste (event: ClipboardEvent) {\n      if (!this.multiple || this.searchIsDirty) return\n\n      const pastedItemText = event.clipboardData!.getData('text/vnd.vuetify.autocomplete.item+plain')\n      if (pastedItemText && this.findExistingIndex(pastedItemText as any) === -1) {\n        event.preventDefault()\n        VSelect.options.methods.selectItem.call(this, pastedItemText as any)\n      }\n    },\n  },\n})\n","// Styles\nimport './VTextarea.sass'\n\n// Extensions\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mixins from '../../util/mixins'\n\n// Types\nimport Vue from 'vue'\n\ninterface options extends Vue {\n  $refs: {\n    input: HTMLTextAreaElement\n  }\n}\n\nconst baseMixins = mixins<options &\n  InstanceType<typeof VTextField>\n>(\n  VTextField\n)\n\n/* @vue/component */\nexport default baseMixins.extend({\n  name: 'v-textarea',\n\n  props: {\n    autoGrow: Boolean,\n    noResize: Boolean,\n    rowHeight: {\n      type: [Number, String],\n      default: 24,\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: (v: any) => !isNaN(parseInt(v, 10)),\n    },\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-textarea': true,\n        'v-textarea--auto-grow': this.autoGrow,\n        'v-textarea--no-resize': this.noResizeHandle,\n        ...VTextField.options.computed.classes.call(this),\n      }\n    },\n    noResizeHandle (): boolean {\n      return this.noResize || this.autoGrow\n    },\n  },\n\n  watch: {\n    lazyValue () {\n      this.autoGrow && this.$nextTick(this.calculateInputHeight)\n    },\n    rowHeight () {\n      this.autoGrow && this.$nextTick(this.calculateInputHeight)\n    },\n  },\n\n  mounted () {\n    setTimeout(() => {\n      this.autoGrow && this.calculateInputHeight()\n    }, 0)\n  },\n\n  methods: {\n    calculateInputHeight () {\n      const input = this.$refs.input\n      if (!input) return\n\n      input.style.height = '0'\n      const height = input.scrollHeight\n      const minHeight = parseInt(this.rows, 10) * parseFloat(this.rowHeight)\n      // This has to be done ASAP, waiting for Vue\n      // to update the DOM causes ugly layout jumping\n      input.style.height = Math.max(minHeight, height) + 'px'\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.tag = 'textarea'\n      delete input.data!.attrs!.type\n      input.data!.attrs!.rows = this.rows\n\n      return input\n    },\n    onInput (e: Event) {\n      VTextField.options.methods.onInput.call(this, e)\n      this.autoGrow && this.calculateInputHeight()\n    },\n    onKeyDown (e: KeyboardEvent) {\n      // Prevents closing of a\n      // dialog when pressing\n      // enter\n      if (this.isFocused && e.keyCode === 13) {\n        e.stopPropagation()\n      }\n\n      this.$emit('keydown', e)\n    },\n  },\n})\n","// Styles\nimport './VAutocomplete.sass'\n\n// Extensions\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect'\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mergeData from '../../util/mergeData'\nimport { keyCodes, getObjectValueByPath } from '../../util/helpers'\n\n// Types\nimport { PropType } from 'vue'\n\nconst defaultMenuProps = {\n  ...VSelectMenuProps,\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false,\n}\n\n/* @vue/component */\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true,\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false,\n    },\n    filter: {\n      type: Function,\n      default: (item: any, queryText: string, itemText: string) => {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1\n      },\n    },\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: () => defaultMenuProps,\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String as PropType<string | undefined>,\n      default: undefined,\n    },\n  },\n\n  data () {\n    return {\n      lazySearch: this.searchInput,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VSelect.options.computed.classes.call(this),\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1,\n      }\n    },\n    computedItems (): object[] {\n      return this.filteredItems\n    },\n    selectedValues (): object[] {\n      return this.selectedItems.map(item => this.getValue(item))\n    },\n    hasDisplayedItems (): boolean {\n      return this.hideSelected\n        ? this.filteredItems.some(item => !this.hasItem(item))\n        : this.filteredItems.length > 0\n    },\n    currentRange (): number {\n      if (this.selectedItem == null) return 0\n\n      return String(this.getText(this.selectedItem)).length\n    },\n    filteredItems (): object[] {\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems\n\n      return this.allItems.filter(item => this.filter(item, String(this.internalSearch), String(this.getText(item))))\n    },\n    internalSearch: {\n      get (): string | undefined {\n        return this.lazySearch\n      },\n      set (val: any) {\n        this.lazySearch = val\n\n        this.$emit('update:search-input', val)\n      },\n    },\n    isAnyValueAllowed (): boolean {\n      return false\n    },\n    isDirty (): boolean {\n      return this.searchIsDirty || this.selectedItems.length > 0\n    },\n    isSearching (): boolean {\n      return (\n        this.multiple &&\n        this.searchIsDirty\n      ) || (\n        this.searchIsDirty &&\n        this.internalSearch !== this.getText(this.selectedItem)\n      )\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems || !this.hideNoData\n    },\n    $_menuProps (): object {\n      const props = VSelect.options.computed.$_menuProps.call(this);\n      (props as any).contentClass = `v-autocomplete__content ${(props as any).contentClass || ''}`.trim()\n      return {\n        ...defaultMenuProps,\n        ...props,\n      }\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null &&\n        this.internalSearch !== ''\n    },\n    selectedItem (): any {\n      if (this.multiple) return null\n\n      return this.selectedItems.find(i => {\n        return this.valueComparator(this.getValue(i), this.getValue(this.internalValue))\n      })\n    },\n    listData () {\n      const data = VSelect.options.computed.listData.call(this) as any\n\n      data.props = {\n        ...data.props,\n        items: this.virtualizedItems,\n        noFilter: (\n          this.noFilter ||\n          !this.isSearching ||\n          !this.filteredItems.length\n        ),\n        searchInput: this.internalSearch,\n      }\n\n      return data\n    },\n  },\n\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused (val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.select()\n      } else {\n        document.removeEventListener('copy', this.onCopy)\n        this.updateSelf()\n      }\n    },\n    isMenuActive (val) {\n      if (val || !this.hasSlot) return\n\n      this.lazySearch = undefined\n    },\n    items (val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (\n        !(oldVal && oldVal.length) &&\n        this.hideNoData &&\n        this.isFocused &&\n        !this.isMenuActive &&\n        val.length\n      ) this.activateMenu()\n    },\n    searchInput (val: string) {\n      this.lazySearch = val\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf',\n  },\n\n  created () {\n    this.setSearch()\n  },\n\n  methods: {\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return\n\n      this.setMenuIndex(-1)\n\n      this.$nextTick(() => {\n        if (\n          !this.internalSearch ||\n          (val.length !== 1 &&\n            !this.autoSelectFirst)\n        ) return\n\n        this.$refs.menu.getTiles()\n        this.setMenuIndex(0)\n      })\n    },\n    onInternalSearchChanged () {\n      this.updateMenuDimensions()\n    },\n    updateMenuDimensions () {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions()\n    },\n    changeSelectedIndex (keyCode: number) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1\n        } else {\n          this.selectedIndex--\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1\n        } else {\n          this.selectedIndex++\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem()\n      }\n    },\n    deleteCurrentItem () {\n      if (this.readonly) return\n\n      const index = this.selectedItems.length - 1\n\n      if (this.selectedIndex === -1 && index !== 0) {\n        this.selectedIndex = index\n        return\n      }\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n\n      if (this.getDisabled(currentItem)) return\n\n      const newIndex = this.selectedIndex === index\n        ? this.selectedIndex - 1\n        : this.selectedItems[this.selectedIndex + 1]\n          ? this.selectedIndex\n          : -1\n\n      if (newIndex === -1) {\n        this.setValue(this.multiple ? [] : undefined)\n      } else {\n        this.selectItem(currentItem)\n      }\n\n      this.selectedIndex = newIndex\n    },\n    clearableCallback () {\n      this.internalSearch = undefined\n\n      VSelect.options.methods.clearableCallback.call(this)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = mergeData(input.data!, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data!, 'attrs.autocomplete', 'off'),\n        },\n        domProps: { value: this.internalSearch },\n      })\n\n      return input\n    },\n    genInputSlot () {\n      const slot = VSelect.options.methods.genInputSlot.call(this)\n\n      slot.data!.attrs!.role = 'combobox'\n\n      return slot\n    },\n    genSelections () {\n      return this.hasSlot || this.multiple\n        ? VSelect.options.methods.genSelections.call(this)\n        : []\n    },\n    onClick (e: MouseEvent) {\n      if (this.isDisabled) return\n\n      this.selectedIndex > -1\n        ? (this.selectedIndex = -1)\n        : this.onFocus()\n\n      if (!this.isAppendInner(e.target)) this.activateMenu()\n    },\n    onInput (e: Event) {\n      if (\n        this.selectedIndex > -1 ||\n        !e.target\n      ) return\n\n      const target = e.target as HTMLInputElement\n      const value = target.value\n\n      // If typing and menu is not currently active\n      if (target.value) this.activateMenu()\n\n      this.internalSearch = value\n      this.badInput = target.validity && target.validity.badInput\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      VSelect.options.methods.onKeyDown.call(this, e)\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onSpaceDown (e: KeyboardEvent) { /* noop */ },\n    onTabDown (e: KeyboardEvent) {\n      VSelect.options.methods.onTabDown.call(this, e)\n      this.updateSelf()\n    },\n    onUpDown (e: Event) {\n      // Prevent screen from scrolling\n      e.preventDefault()\n\n      // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n      this.activateMenu()\n    },\n    selectItem (item: object) {\n      VSelect.options.methods.selectItem.call(this, item)\n      this.setSearch()\n    },\n    setSelectedItems () {\n      VSelect.options.methods.setSelectedItems.call(this)\n\n      // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n      if (!this.isFocused) this.setSearch()\n    },\n    setSearch () {\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(() => {\n        if (\n          !this.multiple ||\n          !this.internalSearch ||\n          !this.isMenuActive\n        ) {\n          this.internalSearch = (\n            !this.selectedItems.length ||\n            this.multiple ||\n            this.hasSlot\n          )\n            ? null\n            : this.getText(this.selectedItem)\n        }\n      })\n    },\n    updateSelf () {\n      if (!this.searchIsDirty &&\n        !this.internalValue\n      ) return\n\n      if (!this.valueComparator(\n        this.internalSearch,\n        this.getValue(this.internalValue)\n      )) {\n        this.setSearch()\n      }\n    },\n    hasItem (item: any) {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1\n    },\n    onCopy (event: ClipboardEvent) {\n      if (this.selectedIndex === -1) return\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n      const currentItemText = this.getText(currentItem)\n      event.clipboardData!.setData('text/plain', currentItemText)\n      event.clipboardData!.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText)\n      event.preventDefault()\n    },\n  },\n})\n","// Styles\nimport './VDivider.sass'\n\n// Types\nimport { VNode } from 'vue'\n\n// Mixins\nimport Themeable from '../../mixins/themeable'\n\nexport default Themeable.extend({\n  name: 'v-divider',\n\n  props: {\n    inset: Boolean,\n    vertical: Boolean,\n  },\n\n  render (h): VNode {\n    // WAI-ARIA attributes\n    let orientation\n    if (!this.$attrs.role || this.$attrs.role === 'separator') {\n      orientation = this.vertical ? 'vertical' : 'horizontal'\n    }\n    return h('hr', {\n      class: {\n        'v-divider': true,\n        'v-divider--inset': this.inset,\n        'v-divider--vertical': this.vertical,\n        ...this.themeClasses,\n      },\n      attrs: {\n        role: 'separator',\n        'aria-orientation': orientation,\n        ...this.$attrs,\n      },\n      on: this.$listeners,\n    })\n  },\n})\n"],"sourceRoot":""}